#include<iostream>
#include<string>
#include<cmath>

using namespace std;

int main() {

	// i는 몇 번째 접근인지 저장
	int i = 0;

	// N, r, c 선언 및 입력
	int N, r, c;
	cin >> N >> r >> c;

	// N을 하나씩 줄여가면서 실행하되, 0보다 클 때만 실행
	// pow(m,n) = m^n (m의 n승)
	while (N > 0) {

		// 현재 행렬을 4개로 분할
		// 왼쪽 위 : 1 구역
		// 오른쪽 위 : 2 구역
		// 왼쪽 아래 : 3 구역
		// 오른쪽 아래 : 4 구역

		if (pow(2, N - 1) - 1 < r) {

			// r행 c열이 '4 구역'인 경우
			if (pow(2, N - 1) - 1 < c) {
				
				// i에는 1,2,3 구역의 원소 개수만큼 +
				// r은 1,2 구역에 존재하는 행 개수만큼 -
				// c는 1,3 구역에 존재하는 열 개수만큼 -
				i += pow(2, 2 * N - 2) * 3;
				r -= pow(2, N - 1);
				c -= pow(2, N - 1);
				// 이렇게 할 시 4구역만이 하나의 독립적인 sub_matrix로 치환됨.
			}

			// r행 c열이 '3 구역'인 경우
			else {
				// i에는 1,2 구역의 원소 개수만큼 +
				// r은 1,2 구역에 존재하는 행 개수만큼 -
				i += pow(2, 2 * N - 1);
				r-= pow(2, N - 1);
				// 이렇게 할 시 3구역만이 하나의 독립적인 sub_matrix로 치환됨.
			}
		}
		else {
			// r행 c열이 '2 구역'인 경우
			if (pow(2, N - 1) - 1 < c) {
				// i에는 1 구역의 원소 개수만큼 +
				// c는 1,3 구역에 존재하는 열 개수만큼 -
				i += pow(2, 2 * N - 2);
				c -= pow(2, N - 1);
				// 이렇게 할 시 3구역만이 하나의 독립적인 sub_matrix로 치환됨.
			}

			// r행 c열이 '1 구역'인 경우
				// 아무 것도 건드리지 말고 N만 -1 하면 알아서 1구역만이 하나의 독립접인 sub_matrix로 치환됨.
		}

		// N 1감소
		N--;
	}
	cout << i;
}